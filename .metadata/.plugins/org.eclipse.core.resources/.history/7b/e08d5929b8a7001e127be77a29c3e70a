/* 
package com.example.cardetails.controller;
import com.example.cardetails.model.Car;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.cardetails.service.CarService;



@RestController
@RequestMapping("/cardetails")
public class CarDetailController {
	
	 CarService carService;
	 private static final Logger logger = LoggerFactory.getLogger(CarDetailController.class);

	
	public CarDetailController(CarService carService) {
		super();
		this.carService = carService;
	}


	@GetMapping
	public List<Car> getCarDetails(String carId)
	{   logger.info("Request received for car information.");
		return carService.getAllCarDetails();
	}
	
	
	@GetMapping("{carId}")
	public Car getCarDetailsById(@PathVariable String carId)
	{
		return carService.getCarDetails(carId);
	}
	
	@PostMapping
	public String createCarDetails(@RequestBody Car car)
	{   carService.createCarDetails(car);
		return "Car deatils added";
	}
	
	@PutMapping
	public String updateCarDetails(@RequestBody Car car)
	{   carService.updateCarDetails(car);
		return "car details updated";
	}
	
	@DeleteMapping("{carId}")
	public String deleteCarDetails(@PathVariable String carId)
	{   carService.deleteCarDetails(carId);
		return "Deleted Sucessfully";
	}
	
}
*/

package com.example.cardetails.controller;

import com.example.cardetails.model.Car;
import com.example.cardetails.service.CarService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.logging.LogLevel;
import org.springframework.boot.logging.LoggingSystem;
import org.springframework.web.bind.annotation.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.List;

@RestController
@RequestMapping("/cardetails")
public class CarDetailController {

    private final CarService carService;
    private static final Logger logger = LoggerFactory.getLogger(CarDetailController.class);

    @Autowired
    private LoggingSystem loggingSystem;

    public CarDetailController(CarService carService) {
        this.carService = carService;
    }

    @GetMapping
    public List<Car> getCarDetails() {
        logger.info("Request received for car information.");
        return carService.getAllCarDetails();
    }

    @GetMapping("{carId}")
    public Car getCarDetailsById(@PathVariable String carId) {
        return carService.getCarDetails(carId);
    }

    @PostMapping
    public String createCarDetails(@RequestBody Car car) {
        carService.createCarDetails(car);
        return "Car details added";
    }

    @PutMapping
    public String updateCarDetails(@RequestBody Car car) {
        carService.updateCarDetails(car);
        return "Car details updated";
    }

    @DeleteMapping("{carId}")
    public String deleteCarDetails(@PathVariable String carId) {
        carService.deleteCarDetails(carId);
        return "Deleted successfully";
    }

    @GetMapping("/logs")
    public String getLogDetails(@RequestParam(name = "level", defaultValue = "INFO") String level) {
        // Set the log level dynamically based on the request parameter
        setLogLevel(level);

        logger.info("Request received for log details at level: {}", level);

        // Reset log level to default (INFO) after handling the request
        setLogLevel("INFO");

        // Your logic to retrieve and return log details
        String logDetails = retrieveLogDetails();

        return logDetails;
    }

    private String retrieveLogDetails() {
        // Use the loggingSystem to retrieve log details
        // This could involve accessing log files, querying logs, etc.
        // Here, we simply return a message for demonstration purposes.
    	 ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
         PrintStream printStream = new PrintStream(byteArrayOutputStream);
         PrintStream originalSystemOut = System.out;
         System.setOut(printStream);

         try {
             // Perform the operation that generates logs
             logger.info("Performing an operation to generate logs.");

             // Retrieve logs from the capture
             return byteArrayOutputStream.toString();
         } finally {
             // Reset System.out to its original state
             System.setOut(originalSystemOut);
         }
    }

    private void setLogLevel(String level) {
        // Set the log level dynamically
        loggingSystem.setLogLevel(CarDetailController.class.getName(), LogLevel.valueOf(level));
    }
}

